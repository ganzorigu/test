
megaLcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000008ca  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  00800206  00800206  00000964  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001414  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068d  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c20  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e14  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000049a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
   2:	00 00       	nop
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
   6:	00 00       	nop
   8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
   a:	00 00       	nop
   c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
   e:	00 00       	nop
  10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
  12:	00 00       	nop
  14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c2       	rjmp	.+1118   	; 0x478 <__vector_6>
  1a:	00 00       	nop
  1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
  22:	00 00       	nop
  24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
  26:	00 00       	nop
  28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
  32:	00 00       	nop
  34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
  36:	00 00       	nop
  38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
  42:	00 00       	nop
  44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
  46:	00 00       	nop
  48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e6 c1       	rjmp	.+972    	; 0x41e <__vector_20>
  52:	00 00       	nop
  54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
  56:	00 00       	nop
  58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
  5e:	00 00       	nop
  60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
  62:	00 00       	nop
  64:	8e c2       	rjmp	.+1308   	; 0x582 <__vector_25>
  66:	00 00       	nop
  68:	b7 c2       	rjmp	.+1390   	; 0x5d8 <__vector_26>
  6a:	00 00       	nop
  6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
  6e:	00 00       	nop
  70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
  72:	00 00       	nop
  74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
  76:	00 00       	nop
  78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
  7e:	00 00       	nop
  80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
  82:	00 00       	nop
  84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
  86:	00 00       	nop
  88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
  8e:	00 00       	nop
  90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
  92:	00 00       	nop
  94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
  96:	00 00       	nop
  98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	65 c0       	rjmp	.+202    	; 0x174 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
  be:	00 00       	nop
  c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
  de:	00 00       	nop
  e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	52 65       	ori	r21, 0x52	; 82
  e6:	70 2e       	mov	r7, r16
  e8:	0d 0a       	sbc	r0, r29
	...

000000eb <__c.2033>:
  eb:	20 20 20 20 20 00                                        .

000000f1 <__c.2031>:
  f1:	20 20 20 20 20 00                                        .

000000f7 <__c.2029>:
  f7:	48 65 6c 6c 6f 20 77 6f 72 6c 64 00                 Hello world.

00000103 <Symbol>:
 103:	02 fd 6f 62 9d 75 22 dd 6c c2 3d 72 a8 57 64 68     ..ob.u".l.=r.Wdh
 113:	97 31 98 67 32 b0 4f 33 30 cf 34 18 e7 35 7a 85     .1.g2.O30.4..5z.
 123:	36 10 ef 37 38 c7 38 5a a5 39 4a b5 30 42 bd 2a     6..78.8Z.9J.0B.*
 133:	52 ad 23                                            R.#

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d1 e2       	ldi	r29, 0x21	; 33
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
 146:	12 e0       	ldi	r17, 0x02	; 2
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b2 e0       	ldi	r27, 0x02	; 2
 14c:	ea ec       	ldi	r30, 0xCA	; 202
 14e:	f8 e0       	ldi	r31, 0x08	; 8
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	0b bf       	out	0x3b, r16	; 59
 154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
 156:	07 90       	elpm	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	a6 30       	cpi	r26, 0x06	; 6
 15c:	b1 07       	cpc	r27, r17
 15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
 160:	23 e0       	ldi	r18, 0x03	; 3
 162:	a6 e0       	ldi	r26, 0x06	; 6
 164:	b2 e0       	ldi	r27, 0x02	; 2
 166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
 168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
 16a:	ac 35       	cpi	r26, 0x5C	; 92
 16c:	b2 07       	cpc	r27, r18
 16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
 170:	3a d3       	rcall	.+1652   	; 0x7e6 <main>
 172:	a9 c3       	rjmp	.+1874   	; 0x8c6 <_exit>

00000174 <__bad_interrupt>:
 174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <i2c_Init>:
	{
		return 0;
	}
	// need to read TWDR
	return 1;
}
 176:	10 92 b9 00 	sts	0x00B9, r1
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	80 93 bb 00 	sts	0x00BB, r24
 180:	88 e4       	ldi	r24, 0x48	; 72
 182:	80 93 b8 00 	sts	0x00B8, r24
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	80 93 bc 00 	sts	0x00BC, r24
 18c:	08 95       	ret

0000018e <i2c_Start>:
 18e:	84 ea       	ldi	r24, 0xA4	; 164
 190:	80 93 bc 00 	sts	0x00BC, r24
 194:	ec eb       	ldi	r30, 0xBC	; 188
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 23       	and	r24, r24
 19c:	ec f7       	brge	.-6      	; 0x198 <i2c_Start+0xa>
 19e:	90 91 b9 00 	lds	r25, 0x00B9
 1a2:	98 7f       	andi	r25, 0xF8	; 248
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	98 30       	cpi	r25, 0x08	; 8
 1a8:	09 f0       	breq	.+2      	; 0x1ac <i2c_Start+0x1e>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <i2c_AddWrite>:
 1ae:	80 93 bb 00 	sts	0x00BB, r24
 1b2:	84 e8       	ldi	r24, 0x84	; 132
 1b4:	80 93 bc 00 	sts	0x00BC, r24
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	ec f7       	brge	.-6      	; 0x1bc <i2c_AddWrite+0xe>
 1c2:	90 91 b9 00 	lds	r25, 0x00B9
 1c6:	98 7f       	andi	r25, 0xF8	; 248
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	98 31       	cpi	r25, 0x18	; 24
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <i2c_AddWrite+0x22>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret

000001d2 <i2c_DataWrite>:
 1d2:	80 93 bb 00 	sts	0x00BB, r24
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	80 93 bc 00 	sts	0x00BC, r24
 1dc:	ec eb       	ldi	r30, 0xBC	; 188
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <i2c_DataWrite+0xe>
 1e6:	90 91 b9 00 	lds	r25, 0x00B9
 1ea:	98 7f       	andi	r25, 0xF8	; 248
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	98 32       	cpi	r25, 0x28	; 40
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <i2c_DataWrite+0x22>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <i2c_Stop>:

void i2c_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// stop condition
 1f6:	84 e9       	ldi	r24, 0x94	; 148
 1f8:	80 93 bc 00 	sts	0x00BC, r24
	while(TWCR&(1<<TWSTO));					// TWSTO will clear after stop condition is over.	
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	84 fd       	sbrc	r24, 4
 204:	fd cf       	rjmp	.-6      	; 0x200 <i2c_Stop+0xa>
}
 206:	08 95       	ret

00000208 <IOEwrite>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
 20c:	c0 df       	rcall	.-128    	; 0x18e <i2c_Start>
 20e:	8e e7       	ldi	r24, 0x7E	; 126
 210:	ce df       	rcall	.-100    	; 0x1ae <i2c_AddWrite>
 212:	8c 2f       	mov	r24, r28
 214:	de df       	rcall	.-68     	; 0x1d2 <i2c_DataWrite>
 216:	ef df       	rcall	.-34     	; 0x1f6 <i2c_Stop>
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <lcd_write>:
 21c:	cf 93       	push	r28
 21e:	c8 2f       	mov	r28, r24
 220:	66 23       	and	r22, r22
 222:	31 f0       	breq	.+12     	; 0x230 <lcd_write+0x14>
 224:	80 91 06 02 	lds	r24, 0x0206
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 93 06 02 	sts	0x0206, r24
 22e:	05 c0       	rjmp	.+10     	; 0x23a <lcd_write+0x1e>
 230:	80 91 06 02 	lds	r24, 0x0206
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	80 93 06 02 	sts	0x0206, r24
 23a:	80 91 06 02 	lds	r24, 0x0206
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	80 93 06 02 	sts	0x0206, r24
 244:	80 91 06 02 	lds	r24, 0x0206
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	80 93 06 02 	sts	0x0206, r24
 24e:	80 91 06 02 	lds	r24, 0x0206
 252:	9c 2f       	mov	r25, r28
 254:	90 7f       	andi	r25, 0xF0	; 240
 256:	89 2b       	or	r24, r25
 258:	80 93 06 02 	sts	0x0206, r24
 25c:	80 91 06 02 	lds	r24, 0x0206
 260:	84 60       	ori	r24, 0x04	; 4
 262:	80 93 06 02 	sts	0x0206, r24
 266:	80 91 06 02 	lds	r24, 0x0206
 26a:	ce df       	rcall	.-100    	; 0x208 <IOEwrite>
 26c:	80 91 06 02 	lds	r24, 0x0206
 270:	8b 7f       	andi	r24, 0xFB	; 251
 272:	80 93 06 02 	sts	0x0206, r24
 276:	80 91 06 02 	lds	r24, 0x0206
 27a:	c6 df       	rcall	.-116    	; 0x208 <IOEwrite>
 27c:	80 91 06 02 	lds	r24, 0x0206
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	80 93 06 02 	sts	0x0206, r24
 286:	20 91 06 02 	lds	r18, 0x0206
 28a:	30 e1       	ldi	r19, 0x10	; 16
 28c:	c3 9f       	mul	r28, r19
 28e:	c0 01       	movw	r24, r0
 290:	11 24       	eor	r1, r1
 292:	82 2b       	or	r24, r18
 294:	80 93 06 02 	sts	0x0206, r24
 298:	80 91 06 02 	lds	r24, 0x0206
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	80 93 06 02 	sts	0x0206, r24
 2a2:	80 91 06 02 	lds	r24, 0x0206
 2a6:	b0 df       	rcall	.-160    	; 0x208 <IOEwrite>
 2a8:	80 91 06 02 	lds	r24, 0x0206
 2ac:	8b 7f       	andi	r24, 0xFB	; 251
 2ae:	80 93 06 02 	sts	0x0206, r24
 2b2:	80 91 06 02 	lds	r24, 0x0206
 2b6:	a8 df       	rcall	.-176    	; 0x208 <IOEwrite>
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <lcd_control_pins>:
 2bc:	66 23       	and	r22, r22
 2be:	79 f0       	breq	.+30     	; 0x2de <lcd_control_pins+0x22>
 2c0:	40 91 06 02 	lds	r20, 0x0206
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <lcd_control_pins+0x14>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <lcd_control_pins+0x10>
 2d4:	cb 01       	movw	r24, r22
 2d6:	84 2b       	or	r24, r20
 2d8:	80 93 06 02 	sts	0x0206, r24
 2dc:	0f c0       	rjmp	.+30     	; 0x2fc <lcd_control_pins+0x40>
 2de:	40 91 06 02 	lds	r20, 0x0206
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <lcd_control_pins+0x32>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <lcd_control_pins+0x2e>
 2f2:	cb 01       	movw	r24, r22
 2f4:	80 95       	com	r24
 2f6:	84 23       	and	r24, r20
 2f8:	80 93 06 02 	sts	0x0206, r24
 2fc:	80 91 06 02 	lds	r24, 0x0206
 300:	83 cf       	rjmp	.-250    	; 0x208 <IOEwrite>
 302:	08 95       	ret

00000304 <toggle_e>:
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	d9 df       	rcall	.-78     	; 0x2bc <lcd_control_pins>
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <toggle_e+0x8>
 310:	00 00       	nop
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	d2 cf       	rjmp	.-92     	; 0x2bc <lcd_control_pins>
 318:	08 95       	ret

0000031a <lcd_command>:
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	7f cf       	rjmp	.-258    	; 0x21c <lcd_write>
 31e:	08 95       	ret

00000320 <lcd_gotoxy>:
 320:	61 11       	cpse	r22, r1
 322:	03 c0       	rjmp	.+6      	; 0x32a <lcd_gotoxy+0xa>
 324:	80 58       	subi	r24, 0x80	; 128
 326:	f9 cf       	rjmp	.-14     	; 0x31a <lcd_command>
 328:	08 95       	ret
 32a:	80 54       	subi	r24, 0x40	; 64
 32c:	f6 cf       	rjmp	.-20     	; 0x31a <lcd_command>
 32e:	08 95       	ret

00000330 <lcd_clrscr>:
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	f3 df       	rcall	.-26     	; 0x31a <lcd_command>
 334:	8f e9       	ldi	r24, 0x9F	; 159
 336:	9f e0       	ldi	r25, 0x0F	; 15
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_clrscr+0x8>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_clrscr+0xe>
 33e:	00 00       	nop
 340:	08 95       	ret

00000342 <lcd_putc>:
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{    
    lcd_write(c, 1);    
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	6b cf       	rjmp	.-298    	; 0x21c <lcd_write>
 346:	08 95       	ret

00000348 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 34c:	ec 01       	movw	r28, r24
 34e:	21 96       	adiw	r28, 0x01	; 1
 350:	fc 01       	movw	r30, r24
 352:	80 81       	ld	r24, Z
 354:	88 23       	and	r24, r24
 356:	21 f0       	breq	.+8      	; 0x360 <lcd_puts+0x18>
        lcd_putc(c);
 358:	f4 df       	rcall	.-24     	; 0x342 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 35a:	89 91       	ld	r24, Y+
 35c:	81 11       	cpse	r24, r1
 35e:	fc cf       	rjmp	.-8      	; 0x358 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 36a:	ec 01       	movw	r28, r24
 36c:	21 96       	adiw	r28, 0x01	; 1
 36e:	fc 01       	movw	r30, r24
 370:	84 91       	lpm	r24, Z
 372:	88 23       	and	r24, r24
 374:	31 f0       	breq	.+12     	; 0x382 <lcd_puts_p+0x1c>
        lcd_putc(c);
 376:	e5 df       	rcall	.-54     	; 0x342 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 378:	fe 01       	movw	r30, r28
 37a:	84 91       	lpm	r24, Z
 37c:	21 96       	adiw	r28, 0x01	; 1
 37e:	81 11       	cpse	r24, r1
 380:	fa cf       	rjmp	.-12     	; 0x376 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{	
 388:	cf 93       	push	r28
 38a:	c8 2f       	mov	r28, r24
	pcf_data = 0;
 38c:	10 92 06 02 	sts	0x0206, r1
	i2c_Init();	
 390:	f2 de       	rcall	.-540    	; 0x176 <i2c_Init>
	
	lcd_control_pins(3,HIGH);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	92 df       	rcall	.-220    	; 0x2bc <lcd_control_pins>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	99 ef       	ldi	r25, 0xF9	; 249
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x14>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_init+0x1a>
 3a2:	00 00       	nop
	
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
	pcf_data |= (_BV(LCD_DATA1_PIN) | _BV(LCD_DATA0_PIN));
 3a4:	90 91 06 02 	lds	r25, 0x0206
 3a8:	90 63       	ori	r25, 0x30	; 48
 3aa:	90 93 06 02 	sts	0x0206, r25
	IOEwrite(pcf_data);
 3ae:	80 91 06 02 	lds	r24, 0x0206
 3b2:	2a df       	rcall	.-428    	; 0x208 <IOEwrite>
		
    lcd_e_toggle();
 3b4:	a7 df       	rcall	.-178    	; 0x304 <toggle_e>
 3b6:	8f e1       	ldi	r24, 0x1F	; 31
 3b8:	9e e4       	ldi	r25, 0x4E	; 78
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_init+0x32>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_init+0x38>
 3c0:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3c2:	a0 df       	rcall	.-192    	; 0x304 <toggle_e>
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_init+0x40>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_init+0x46>
 3ce:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3d0:	99 df       	rcall	.-206    	; 0x304 <toggle_e>
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_init+0x4e>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_init+0x54>
 3dc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */		
	pcf_data &= ~_BV(LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
 3de:	90 91 06 02 	lds	r25, 0x0206
 3e2:	9f 7e       	andi	r25, 0xEF	; 239
 3e4:	90 93 06 02 	sts	0x0206, r25
	IOEwrite(pcf_data);
 3e8:	80 91 06 02 	lds	r24, 0x0206
 3ec:	0d df       	rcall	.-486    	; 0x208 <IOEwrite>
    lcd_e_toggle();
 3ee:	8a df       	rcall	.-236    	; 0x304 <toggle_e>
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_init+0x6c>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <lcd_init+0x72>
 3fa:	00 00       	nop
    delay(LCD_DELAY_INIT_4BIT);          /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3fc:	88 e2       	ldi	r24, 0x28	; 40
 3fe:	8d df       	rcall	.-230    	; 0x31a <lcd_command>

    lcd_command(LCD_DISP_ON);              /* display off                  */
 400:	8c e0       	ldi	r24, 0x0C	; 12
 402:	8b df       	rcall	.-234    	; 0x31a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 404:	95 df       	rcall	.-214    	; 0x330 <lcd_clrscr>
	
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	88 df       	rcall	.-240    	; 0x31a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 40a:	8c 2f       	mov	r24, r28
 40c:	86 df       	rcall	.-244    	; 0x31a <lcd_command>

}/* lcd_init */
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <Timer1_stop>:
	while(*pt_str!=0)
	{
		uart0_putc(*pt_str);
		pt_str++;
	}
}
 412:	e1 e8       	ldi	r30, 0x81	; 129
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8c 7f       	andi	r24, 0xFC	; 252
 41a:	80 83       	st	Z, r24
 41c:	08 95       	ret

0000041e <__vector_20>:
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	0b b6       	in	r0, 0x3b	; 59
 42a:	0f 92       	push	r0
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	e6 df       	rcall	.-52     	; 0x412 <Timer1_stop>
 446:	84 e9       	ldi	r24, 0x94	; 148
 448:	91 e1       	ldi	r25, 0x11	; 17
 44a:	90 93 85 00 	sts	0x0085, r25
 44e:	80 93 84 00 	sts	0x0084, r24
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0b be       	out	0x3b, r0	; 59
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_6>:
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	0b b6       	in	r0, 0x3b	; 59
 484:	0f 92       	push	r0
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
 49e:	b9 df       	rcall	.-142    	; 0x412 <Timer1_stop>
 4a0:	e4 e8       	ldi	r30, 0x84	; 132
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	20 81       	ld	r18, Z
 4a6:	31 81       	ldd	r19, Z+1	; 0x01
 4a8:	11 82       	std	Z+1, r1	; 0x01
 4aa:	10 82       	st	Z, r1
 4ac:	80 91 8b 02 	lds	r24, 0x028B
 4b0:	88 23       	and	r24, r24
 4b2:	19 f0       	breq	.+6      	; 0x4ba <__vector_6+0x42>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	b9 f0       	breq	.+46     	; 0x4e6 <__vector_6+0x6e>
 4b8:	34 c0       	rjmp	.+104    	; 0x522 <__vector_6+0xaa>
 4ba:	22 3b       	cpi	r18, 0xB2	; 178
 4bc:	88 e0       	ldi	r24, 0x08	; 8
 4be:	38 07       	cpc	r19, r24
 4c0:	08 f4       	brcc	.+2      	; 0x4c4 <__vector_6+0x4c>
 4c2:	49 c0       	rjmp	.+146    	; 0x556 <__vector_6+0xde>
 4c4:	65 9b       	sbis	0x0c, 5	; 12
 4c6:	47 c0       	rjmp	.+142    	; 0x556 <__vector_6+0xde>
 4c8:	e0 91 8b 02 	lds	r30, 0x028B
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	e0 57       	subi	r30, 0x70	; 112
 4d4:	fd 4f       	sbci	r31, 0xFD	; 253
 4d6:	31 83       	std	Z+1, r19	; 0x01
 4d8:	20 83       	st	Z, r18
 4da:	80 91 8b 02 	lds	r24, 0x028B
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 93 8b 02 	sts	0x028B, r24
 4e4:	38 c0       	rjmp	.+112    	; 0x556 <__vector_6+0xde>
 4e6:	23 36       	cpi	r18, 0x63	; 99
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	38 07       	cpc	r19, r24
 4ec:	78 f0       	brcs	.+30     	; 0x50c <__vector_6+0x94>
 4ee:	e0 91 8b 02 	lds	r30, 0x028B
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	e0 57       	subi	r30, 0x70	; 112
 4fa:	fd 4f       	sbci	r31, 0xFD	; 253
 4fc:	31 83       	std	Z+1, r19	; 0x01
 4fe:	20 83       	st	Z, r18
 500:	80 91 8b 02 	lds	r24, 0x028B
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	80 93 8b 02 	sts	0x028B, r24
 50a:	25 c0       	rjmp	.+74     	; 0x556 <__vector_6+0xde>
 50c:	27 32       	cpi	r18, 0x27	; 39
 50e:	32 40       	sbci	r19, 0x02	; 2
 510:	10 f1       	brcs	.+68     	; 0x556 <__vector_6+0xde>
 512:	10 92 8b 02 	sts	0x028B, r1
 516:	80 91 8c 02 	lds	r24, 0x028C
 51a:	82 60       	ori	r24, 0x02	; 2
 51c:	80 93 8c 02 	sts	0x028C, r24
 520:	1a c0       	rjmp	.+52     	; 0x556 <__vector_6+0xde>
 522:	80 91 8b 02 	lds	r24, 0x028B
 526:	83 34       	cpi	r24, 0x43	; 67
 528:	40 f0       	brcs	.+16     	; 0x53a <__vector_6+0xc2>
 52a:	10 92 8b 02 	sts	0x028B, r1
 52e:	80 91 8c 02 	lds	r24, 0x028C
 532:	81 60       	ori	r24, 0x01	; 1
 534:	80 93 8c 02 	sts	0x028C, r24
 538:	0e c0       	rjmp	.+28     	; 0x556 <__vector_6+0xde>
 53a:	e0 91 8b 02 	lds	r30, 0x028B
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	e0 57       	subi	r30, 0x70	; 112
 546:	fd 4f       	sbci	r31, 0xFD	; 253
 548:	31 83       	std	Z+1, r19	; 0x01
 54a:	20 83       	st	Z, r18
 54c:	80 91 8b 02 	lds	r24, 0x028B
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	80 93 8b 02 	sts	0x028B, r24
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	80 93 81 00 	sts	0x0081, r24
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0b be       	out	0x3b, r0	; 59
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_25>:
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	0b b6       	in	r0, 0x3b	; 59
 58e:	0f 92       	push	r0
 590:	8f 93       	push	r24
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
 596:	e0 91 07 02 	lds	r30, 0x0207
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	8e 0f       	add	r24, r30
 59e:	80 93 07 02 	sts	0x0207, r24
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 91 c6 00 	lds	r24, 0x00C6
 5a8:	e6 5e       	subi	r30, 0xE6	; 230
 5aa:	fc 4f       	sbci	r31, 0xFC	; 252
 5ac:	80 83       	st	Z, r24
 5ae:	80 91 07 02 	lds	r24, 0x0207
 5b2:	80 32       	cpi	r24, 0x20	; 32
 5b4:	10 f0       	brcs	.+4      	; 0x5ba <__vector_25+0x38>
 5b6:	10 92 07 02 	sts	0x0207, r1
 5ba:	80 91 8c 02 	lds	r24, 0x028C
 5be:	84 60       	ori	r24, 0x04	; 4
 5c0:	80 93 8c 02 	sts	0x028C, r24
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	8f 91       	pop	r24
 5ca:	0f 90       	pop	r0
 5cc:	0b be       	out	0x3b, r0	; 59
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_26>:
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	0b b6       	in	r0, 0x3b	; 59
 5e4:	0f 92       	push	r0
 5e6:	8f 93       	push	r24
 5e8:	9f 93       	push	r25
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
 5ee:	90 91 0a 02 	lds	r25, 0x020A
 5f2:	80 91 09 02 	lds	r24, 0x0209
 5f6:	98 17       	cp	r25, r24
 5f8:	69 f0       	breq	.+26     	; 0x614 <__vector_26+0x3c>
 5fa:	e0 91 09 02 	lds	r30, 0x0209
 5fe:	ef 5f       	subi	r30, 0xFF	; 255
 600:	ef 77       	andi	r30, 0x7F	; 127
 602:	e0 93 09 02 	sts	0x0209, r30
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	e5 5f       	subi	r30, 0xF5	; 245
 60a:	fd 4f       	sbci	r31, 0xFD	; 253
 60c:	80 81       	ld	r24, Z
 60e:	80 93 c6 00 	sts	0x00C6, r24
 612:	05 c0       	rjmp	.+10     	; 0x61e <__vector_26+0x46>
 614:	e1 ec       	ldi	r30, 0xC1	; 193
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	8f 7d       	andi	r24, 0xDF	; 223
 61c:	80 83       	st	Z, r24
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	0f 90       	pop	r0
 628:	0b be       	out	0x3b, r0	; 59
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <Timer1_Init>:
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	80 93 81 00 	sts	0x0081, r24
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	80 93 6f 00 	sts	0x006F, r24
 640:	08 95       	ret

00000642 <ExtPin_Init>:
 642:	84 e0       	ldi	r24, 0x04	; 4
 644:	80 93 6a 00 	sts	0x006A, r24
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	8d bb       	out	0x1d, r24	; 29
 64c:	08 95       	ret

0000064e <Usart0_Init>:
 64e:	10 92 c5 00 	sts	0x00C5, r1
 652:	87 e6       	ldi	r24, 0x67	; 103
 654:	80 93 c4 00 	sts	0x00C4, r24
 658:	88 e9       	ldi	r24, 0x98	; 152
 65a:	80 93 c1 00 	sts	0x00C1, r24
 65e:	86 e0       	ldi	r24, 0x06	; 6
 660:	80 93 c2 00 	sts	0x00C2, r24
 664:	08 95       	ret

00000666 <uart0_putc>:
 666:	20 91 0a 02 	lds	r18, 0x020A
 66a:	2f 5f       	subi	r18, 0xFF	; 255
 66c:	2f 77       	andi	r18, 0x7F	; 127
 66e:	90 91 09 02 	lds	r25, 0x0209
 672:	29 17       	cp	r18, r25
 674:	e1 f3       	breq	.-8      	; 0x66e <uart0_putc+0x8>
 676:	e2 2f       	mov	r30, r18
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	e5 5f       	subi	r30, 0xF5	; 245
 67c:	fd 4f       	sbci	r31, 0xFD	; 253
 67e:	80 83       	st	Z, r24
 680:	20 93 0a 02 	sts	0x020A, r18
 684:	e1 ec       	ldi	r30, 0xC1	; 193
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	80 62       	ori	r24, 0x20	; 32
 68c:	80 83       	st	Z, r24
 68e:	08 95       	ret

00000690 <print_console>:
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	ec 01       	movw	r28, r24
 696:	21 96       	adiw	r28, 0x01	; 1
 698:	fc 01       	movw	r30, r24
 69a:	84 91       	lpm	r24, Z
 69c:	88 23       	and	r24, r24
 69e:	31 f0       	breq	.+12     	; 0x6ac <print_console+0x1c>
 6a0:	e2 df       	rcall	.-60     	; 0x666 <uart0_putc>
 6a2:	fe 01       	movw	r30, r28
 6a4:	84 91       	lpm	r24, Z
 6a6:	21 96       	adiw	r28, 0x01	; 1
 6a8:	81 11       	cpse	r24, r1
 6aa:	fa cf       	rjmp	.-12     	; 0x6a0 <print_console+0x10>
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <Variable_Init>:

void Variable_Init()
{
	UsartRxPtr = 0;
 6b2:	10 92 08 02 	sts	0x0208, r1
	UART_TxHead = 0;
 6b6:	10 92 0a 02 	sts	0x020A, r1
	UART_TxTail = 0;
 6ba:	10 92 09 02 	sts	0x0209, r1
	SM = DISARMED;
 6be:	10 92 8f 02 	sts	0x028F, r1
 6c2:	08 95       	ret

000006c4 <detect_symbol>:
}

uint8_t detect_symbol(uint8_t *a)
{
	uint8_t i = 0;	
	uint8_t HighByte = *a;
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 81       	ld	r18, Z
	a++;
	uint8_t LowByte = *a;
 6c8:	31 81       	ldd	r19, Z+1	; 0x01
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	fc 01       	movw	r30, r24
 6d0:	ed 5f       	subi	r30, 0xFD	; 253
 6d2:	fe 4f       	sbci	r31, 0xFE	; 254
	
	while(i<17)
	{
		if (HighByte == pgm_read_byte(&Symbol[i*3]))
 6d4:	e4 91       	lpm	r30, Z
 6d6:	2e 13       	cpse	r18, r30
 6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <detect_symbol+0x32>
 6da:	fc 01       	movw	r30, r24
 6dc:	ec 5f       	subi	r30, 0xFC	; 252
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			if (LowByte == pgm_read_byte(&Symbol[i*3+1]))
 6e0:	e4 91       	lpm	r30, Z
 6e2:	3e 13       	cpse	r19, r30
 6e4:	08 c0       	rjmp	.+16     	; 0x6f6 <detect_symbol+0x32>
			{				
				sValue = pgm_read_byte(&Symbol[i*3+2]);
 6e6:	fc 01       	movw	r30, r24
 6e8:	eb 5f       	subi	r30, 0xFB	; 251
 6ea:	fe 4f       	sbci	r31, 0xFE	; 254
 6ec:	44 91       	lpm	r20, Z
 6ee:	40 93 8e 02 	sts	0x028E, r20
				return 1;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret
 6f6:	03 96       	adiw	r24, 0x03	; 3
	uint8_t i = 0;	
	uint8_t HighByte = *a;
	a++;
	uint8_t LowByte = *a;
	
	while(i<17)
 6f8:	83 33       	cpi	r24, 0x33	; 51
 6fa:	91 05       	cpc	r25, r1
 6fc:	41 f7       	brne	.-48     	; 0x6ce <detect_symbol+0xa>
				return 1;
			}
		}
		i++;
	}	
	return 0;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
}
 700:	08 95       	ret

00000702 <read_Ir>:

uint8_t read_Ir()
{
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	00 d0       	rcall	.+0      	; 0x708 <read_Ir+0x6>
 708:	1f 92       	push	r1
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i = 0, j=3;	
	uint8_t arr[4] = {0,0,0,0};
 70e:	19 82       	std	Y+1, r1	; 0x01
 710:	1a 82       	std	Y+2, r1	; 0x02
 712:	1b 82       	std	Y+3, r1	; 0x03
 714:	1c 82       	std	Y+4, r1	; 0x04
 716:	43 e0       	ldi	r20, 0x03	; 3
 718:	50 e0       	ldi	r21, 0x00	; 0
	return 0;
}

uint8_t read_Ir()
{
	uint8_t i = 0, j=3;	
 71a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t arr[4] = {0,0,0,0};
	unsigned char temp;
	while(i<32)
	{
		temp = i >> 3;
 71c:	83 2f       	mov	r24, r19
 71e:	86 95       	lsr	r24
 720:	86 95       	lsr	r24
 722:	86 95       	lsr	r24
		arr[temp] = arr[temp] << 1;
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	e1 e0       	ldi	r30, 0x01	; 1
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	ec 0f       	add	r30, r28
 72c:	fd 1f       	adc	r31, r29
 72e:	e8 0f       	add	r30, r24
 730:	f9 1f       	adc	r31, r25
 732:	20 81       	ld	r18, Z
 734:	22 0f       	add	r18, r18
 736:	20 83       	st	Z, r18
		if (irBuff[j]>200)
 738:	fa 01       	movw	r30, r20
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	e0 57       	subi	r30, 0x70	; 112
 740:	fd 4f       	sbci	r31, 0xFD	; 253
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	69 3c       	cpi	r22, 0xC9	; 201
 748:	71 05       	cpc	r23, r1
 74a:	40 f0       	brcs	.+16     	; 0x75c <read_Ir+0x5a>
		{
			arr[temp] |= 0x01;
 74c:	e1 e0       	ldi	r30, 0x01	; 1
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ec 0f       	add	r30, r28
 752:	fd 1f       	adc	r31, r29
 754:	e8 0f       	add	r30, r24
 756:	f9 1f       	adc	r31, r25
 758:	21 60       	ori	r18, 0x01	; 1
 75a:	20 83       	st	Z, r18
		}
		i++;
 75c:	3f 5f       	subi	r19, 0xFF	; 255
 75e:	4e 5f       	subi	r20, 0xFE	; 254
 760:	5f 4f       	sbci	r21, 0xFF	; 255
uint8_t read_Ir()
{
	uint8_t i = 0, j=3;	
	uint8_t arr[4] = {0,0,0,0};
	unsigned char temp;
	while(i<32)
 762:	30 32       	cpi	r19, 0x20	; 32
 764:	d9 f6       	brne	.-74     	; 0x71c <read_Ir+0x1a>
			arr[temp] |= 0x01;
		}
		i++;
		j=j+2;
	}
	IrBytes[0] = arr[0];
 766:	e6 e1       	ldi	r30, 0x16	; 22
 768:	f3 e0       	ldi	r31, 0x03	; 3
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	80 83       	st	Z, r24
	IrBytes[1] = arr[1];
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	81 83       	std	Z+1, r24	; 0x01
	IrBytes[2] = arr[2];
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	82 83       	std	Z+2, r24	; 0x02
	IrBytes[3] = arr[3];
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	83 83       	std	Z+3, r24	; 0x03
	return detect_symbol(&arr[2]);	
 77a:	ce 01       	movw	r24, r28
 77c:	03 96       	adiw	r24, 0x03	; 3
 77e:	a2 df       	rcall	.-188    	; 0x6c4 <detect_symbol>
}
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <check_pass>:


uint8_t check_pass()
{
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	00 d0       	rcall	.+0      	; 0x794 <check_pass+0x6>
 794:	1f 92       	push	r1
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
	uint8_t pass[4]={'1', '2', '3', '4'};
 79a:	81 e3       	ldi	r24, 0x31	; 49
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	82 e3       	ldi	r24, 0x32	; 50
 7a0:	8a 83       	std	Y+2, r24	; 0x02
 7a2:	83 e3       	ldi	r24, 0x33	; 51
 7a4:	8b 83       	std	Y+3, r24	; 0x03
 7a6:	84 e3       	ldi	r24, 0x34	; 52
 7a8:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t i=0;
	
	for (i=0;i<4;i++)
	{
		if (UserInput[i]!=pass[i])
 7aa:	80 91 3a 03 	lds	r24, 0x033A
 7ae:	81 33       	cpi	r24, 0x31	; 49
 7b0:	81 f4       	brne	.+32     	; 0x7d2 <check_pass+0x44>
 7b2:	ab e3       	ldi	r26, 0x3B	; 59
 7b4:	b3 e0       	ldi	r27, 0x03	; 3
 7b6:	fe 01       	movw	r30, r28
 7b8:	32 96       	adiw	r30, 0x02	; 2
 7ba:	9e 01       	movw	r18, r28
 7bc:	2b 5f       	subi	r18, 0xFB	; 251
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	9d 91       	ld	r25, X+
 7c2:	81 91       	ld	r24, Z+
 7c4:	98 13       	cpse	r25, r24
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <check_pass+0x48>
uint8_t check_pass()
{
	uint8_t pass[4]={'1', '2', '3', '4'};
	uint8_t i=0;
	
	for (i=0;i<4;i++)
 7c8:	e2 17       	cp	r30, r18
 7ca:	f3 07       	cpc	r31, r19
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <check_pass+0x32>
		if (UserInput[i]!=pass[i])
		{
			return 0;
		}
	}				
	return 1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <check_pass+0x4a>
	
	for (i=0;i<4;i++)
	{
		if (UserInput[i]!=pass[i])
		{
			return 0;
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <check_pass+0x4a>
 7d6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}				
	return 1;
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <main>:
uint8_t check_pass();

int main(void)
{
    /* Replace with your application code */
	cli();	
 7e6:	f8 94       	cli
	Variable_Init();
 7e8:	64 df       	rcall	.-312    	; 0x6b2 <Variable_Init>
	Usart0_Init();	
 7ea:	31 df       	rcall	.-414    	; 0x64e <Usart0_Init>
	Timer1_Init();
 7ec:	23 df       	rcall	.-442    	; 0x634 <Timer1_Init>
	ExtPin_Init();
 7ee:	29 df       	rcall	.-430    	; 0x642 <ExtPin_Init>
	
	lcd_init(LCD_DISP_ON);
 7f0:	8c e0       	ldi	r24, 0x0C	; 12
 7f2:	ca dd       	rcall	.-1132   	; 0x388 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f4:	2f ef       	ldi	r18, 0xFF	; 255
 7f6:	81 ee       	ldi	r24, 0xE1	; 225
 7f8:	94 e0       	ldi	r25, 0x04	; 4
 7fa:	21 50       	subi	r18, 0x01	; 1
 7fc:	80 40       	sbci	r24, 0x00	; 0
 7fe:	90 40       	sbci	r25, 0x00	; 0
 800:	e1 f7       	brne	.-8      	; 0x7fa <main+0x14>
 802:	00 c0       	rjmp	.+0      	; 0x804 <main+0x1e>
 804:	00 00       	nop
	_delay_ms(100);	
	
	print_console(PSTR("Hello world"));
 806:	87 ef       	ldi	r24, 0xF7	; 247
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	42 df       	rcall	.-380    	; 0x690 <print_console>
	
	sei();		
 80c:	78 94       	sei
    while (1) 
    {	
		if (genflg & (1<<bIrRecvd))
 80e:	80 91 8c 02 	lds	r24, 0x028C
 812:	80 ff       	sbrs	r24, 0
 814:	4b c0       	rjmp	.+150    	; 0x8ac <main+0xc6>
		{
			genflg &= ~(1<<bIrRecvd);			
 816:	80 91 8c 02 	lds	r24, 0x028C
 81a:	8e 7f       	andi	r24, 0xFE	; 254
 81c:	80 93 8c 02 	sts	0x028C, r24
			if (read_Ir())
 820:	70 df       	rcall	.-288    	; 0x702 <read_Ir>
 822:	88 23       	and	r24, r24
 824:	a1 f3       	breq	.-24     	; 0x80e <main+0x28>
			{
				lcd_gotoxy(15,0);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	8f e0       	ldi	r24, 0x0F	; 15
 82a:	7a dd       	rcall	.-1292   	; 0x320 <lcd_gotoxy>
				lcd_putc(sValue);
 82c:	80 91 8e 02 	lds	r24, 0x028E
 830:	88 dd       	rcall	.-1264   	; 0x342 <lcd_putc>
				
				if (sValue=='o')
 832:	80 91 8e 02 	lds	r24, 0x028E
 836:	8f 36       	cpi	r24, 0x6F	; 111
 838:	19 f5       	brne	.+70     	; 0x880 <main+0x9a>
				{					
					
					if (check_pass()==1 && sCount==4)
 83a:	a9 df       	rcall	.-174    	; 0x78e <check_pass>
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	b9 f4       	brne	.+46     	; 0x86e <main+0x88>
 840:	80 91 8d 02 	lds	r24, 0x028D
 844:	84 30       	cpi	r24, 0x04	; 4
 846:	99 f4       	brne	.+38     	; 0x86e <main+0x88>
					{
						lcd_gotoxy(0,1);
 848:	61 e0       	ldi	r22, 0x01	; 1
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	69 dd       	rcall	.-1326   	; 0x320 <lcd_gotoxy>
						if (SM==DISARMED)
 84e:	80 91 8f 02 	lds	r24, 0x028F
 852:	81 11       	cpse	r24, r1
 854:	07 c0       	rjmp	.+14     	; 0x864 <main+0x7e>
						{							
							lcd_puts("ARMED");
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	92 e0       	ldi	r25, 0x02	; 2
 85a:	76 dd       	rcall	.-1300   	; 0x348 <lcd_puts>
							SM = ARMED;							
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	80 93 8f 02 	sts	0x028F, r24
 862:	05 c0       	rjmp	.+10     	; 0x86e <main+0x88>
						}
						else
						{
							lcd_puts_p(PSTR("     "));
 864:	81 ef       	ldi	r24, 0xF1	; 241
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	7e dd       	rcall	.-1284   	; 0x366 <lcd_puts_p>
							SM = DISARMED;
 86a:	10 92 8f 02 	sts	0x028F, r1
						}
					}					
					sCount = 0;
 86e:	10 92 8d 02 	sts	0x028D, r1
					lcd_gotoxy(0,0);
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	54 dd       	rcall	.-1368   	; 0x320 <lcd_gotoxy>
					lcd_puts_p(PSTR("     "));
 878:	8b ee       	ldi	r24, 0xEB	; 235
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	74 dd       	rcall	.-1304   	; 0x366 <lcd_puts_p>
 87e:	c7 cf       	rjmp	.-114    	; 0x80e <main+0x28>
				}
				else
				{
					if(sCount < 4)
 880:	80 91 8d 02 	lds	r24, 0x028D
 884:	84 30       	cpi	r24, 0x04	; 4
 886:	08 f0       	brcs	.+2      	; 0x88a <main+0xa4>
 888:	c2 cf       	rjmp	.-124    	; 0x80e <main+0x28>
					{
						lcd_gotoxy(sCount,0);
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	49 dd       	rcall	.-1390   	; 0x320 <lcd_gotoxy>
						lcd_putc('*');	
 88e:	8a e2       	ldi	r24, 0x2A	; 42
 890:	58 dd       	rcall	.-1360   	; 0x342 <lcd_putc>
						UserInput[sCount] = sValue;
 892:	80 91 8d 02 	lds	r24, 0x028D
 896:	e8 2f       	mov	r30, r24
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	e6 5c       	subi	r30, 0xC6	; 198
 89c:	fc 4f       	sbci	r31, 0xFC	; 252
 89e:	90 91 8e 02 	lds	r25, 0x028E
 8a2:	90 83       	st	Z, r25
						sCount++;					
 8a4:	8f 5f       	subi	r24, 0xFF	; 255
 8a6:	80 93 8d 02 	sts	0x028D, r24
 8aa:	b1 cf       	rjmp	.-158    	; 0x80e <main+0x28>

					
				}				
			}
		}
		else if (genflg & (1<<bIrRep))
 8ac:	80 91 8c 02 	lds	r24, 0x028C
 8b0:	81 ff       	sbrs	r24, 1
 8b2:	ad cf       	rjmp	.-166    	; 0x80e <main+0x28>
		{
			genflg &= ~(1<<bIrRep);
 8b4:	80 91 8c 02 	lds	r24, 0x028C
 8b8:	8d 7f       	andi	r24, 0xFD	; 253
 8ba:	80 93 8c 02 	sts	0x028C, r24
			print_console(PSTR("Rep.\r\n"));
 8be:	84 ee       	ldi	r24, 0xE4	; 228
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	e6 de       	rcall	.-564    	; 0x690 <print_console>
 8c4:	a4 cf       	rjmp	.-184    	; 0x80e <main+0x28>

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
