
megaLcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  00800206  00800206  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fb  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ab  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1a  00000000  00000000  000025fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  0000366c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e14  00000000  00000000  00003b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004995  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
   2:	00 00       	nop
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	00 00       	nop
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	00 00       	nop
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
   e:	00 00       	nop
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	00 00       	nop
  18:	29 c2       	rjmp	.+1106   	; 0x46c <__vector_6>
  1a:	00 00       	nop
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
  22:	00 00       	nop
  24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
  26:	00 00       	nop
  28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
  36:	00 00       	nop
  38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
  3e:	00 00       	nop
  40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
  42:	00 00       	nop
  44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
  46:	00 00       	nop
  48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c1       	rjmp	.+960    	; 0x412 <__vector_20>
  52:	00 00       	nop
  54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
  56:	00 00       	nop
  58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
  5e:	00 00       	nop
  60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
  62:	00 00       	nop
  64:	88 c2       	rjmp	.+1296   	; 0x576 <__vector_25>
  66:	00 00       	nop
  68:	b1 c2       	rjmp	.+1378   	; 0x5cc <__vector_26>
  6a:	00 00       	nop
  6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
  72:	00 00       	nop
  74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
  76:	00 00       	nop
  78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
  7e:	00 00       	nop
  80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
  82:	00 00       	nop
  84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
  86:	00 00       	nop
  88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6b c0       	rjmp	.+214    	; 0x168 <__bad_interrupt>
  92:	00 00       	nop
  94:	69 c0       	rjmp	.+210    	; 0x168 <__bad_interrupt>
  96:	00 00       	nop
  98:	67 c0       	rjmp	.+206    	; 0x168 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	65 c0       	rjmp	.+202    	; 0x168 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	63 c0       	rjmp	.+198    	; 0x168 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	61 c0       	rjmp	.+194    	; 0x168 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5f c0       	rjmp	.+190    	; 0x168 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5d c0       	rjmp	.+186    	; 0x168 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	5b c0       	rjmp	.+182    	; 0x168 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	59 c0       	rjmp	.+178    	; 0x168 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	57 c0       	rjmp	.+174    	; 0x168 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	55 c0       	rjmp	.+170    	; 0x168 <__bad_interrupt>
  be:	00 00       	nop
  c0:	53 c0       	rjmp	.+166    	; 0x168 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	51 c0       	rjmp	.+162    	; 0x168 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4f c0       	rjmp	.+158    	; 0x168 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4d c0       	rjmp	.+154    	; 0x168 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	4b c0       	rjmp	.+150    	; 0x168 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	49 c0       	rjmp	.+146    	; 0x168 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	47 c0       	rjmp	.+142    	; 0x168 <__bad_interrupt>
  da:	00 00       	nop
  dc:	45 c0       	rjmp	.+138    	; 0x168 <__bad_interrupt>
  de:	00 00       	nop
  e0:	43 c0       	rjmp	.+134    	; 0x168 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	52 65       	ori	r21, 0x52	; 82
  e6:	70 2e       	mov	r7, r16
  e8:	0d 0a       	sbc	r0, r29
	...

000000eb <__c.2038>:
  eb:	20 20 20 20 20 00                                        .

000000f1 <__c.2036>:
  f1:	20 20 20 20 20 00                                        .

000000f7 <Symbol>:
  f7:	02 fd 6f 62 9d 75 22 dd 6c c2 3d 72 a8 57 64 68     ..ob.u".l.=r.Wdh
 107:	97 31 98 67 32 b0 4f 33 30 cf 34 18 e7 35 7a 85     .1.g2.O30.4..5z.
 117:	36 10 ef 37 38 c7 38 5a a5 39 4a b5 30 42 bd 2a     6..78.8Z.9J.0B.*
 127:	52 ad 23                                            R.#

0000012a <__ctors_end>:
 12a:	11 24       	eor	r1, r1
 12c:	1f be       	out	0x3f, r1	; 63
 12e:	cf ef       	ldi	r28, 0xFF	; 255
 130:	d1 e2       	ldi	r29, 0x21	; 33
 132:	de bf       	out	0x3e, r29	; 62
 134:	cd bf       	out	0x3d, r28	; 61
 136:	00 e0       	ldi	r16, 0x00	; 0
 138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
 13a:	12 e0       	ldi	r17, 0x02	; 2
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b2 e0       	ldi	r27, 0x02	; 2
 140:	e8 eb       	ldi	r30, 0xB8	; 184
 142:	f8 e0       	ldi	r31, 0x08	; 8
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a6 30       	cpi	r26, 0x06	; 6
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	23 e0       	ldi	r18, 0x03	; 3
 156:	a6 e0       	ldi	r26, 0x06	; 6
 158:	b2 e0       	ldi	r27, 0x02	; 2
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	ac 35       	cpi	r26, 0x5C	; 92
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	3a d3       	rcall	.+1652   	; 0x7da <main>
 166:	a6 c3       	rjmp	.+1868   	; 0x8b4 <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <i2c_Init>:
	{
		return 0;
	}
	// need to read TWDR
	return 1;
}
 16a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 180:	08 95       	ret

00000182 <i2c_Start>:
 182:	84 ea       	ldi	r24, 0xA4	; 164
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <i2c_Start+0xa>
 192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	98 30       	cpi	r25, 0x08	; 8
 19c:	09 f0       	breq	.+2      	; 0x1a0 <i2c_Start+0x1e>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <i2c_AddWrite>:
 1a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	ec f7       	brge	.-6      	; 0x1b0 <i2c_AddWrite+0xe>
 1b6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 1ba:	98 7f       	andi	r25, 0xF8	; 248
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	98 31       	cpi	r25, 0x18	; 24
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <i2c_AddWrite+0x22>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <i2c_DataWrite>:
 1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	ec f7       	brge	.-6      	; 0x1d4 <i2c_DataWrite+0xe>
 1da:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 1de:	98 7f       	andi	r25, 0xF8	; 248
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	98 32       	cpi	r25, 0x28	; 40
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <i2c_DataWrite+0x22>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret

000001ea <i2c_Stop>:

void i2c_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// stop condition
 1ea:	84 e9       	ldi	r24, 0x94	; 148
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(TWCR&(1<<TWSTO));					// TWSTO will clear after stop condition is over.	
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	84 fd       	sbrc	r24, 4
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <i2c_Stop+0xa>
}
 1fa:	08 95       	ret

000001fc <IOEwrite>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1fc:	cf 93       	push	r28
 1fe:	c8 2f       	mov	r28, r24
 200:	c0 df       	rcall	.-128    	; 0x182 <i2c_Start>
 202:	8e e7       	ldi	r24, 0x7E	; 126
 204:	ce df       	rcall	.-100    	; 0x1a2 <i2c_AddWrite>
 206:	8c 2f       	mov	r24, r28
 208:	de df       	rcall	.-68     	; 0x1c6 <i2c_DataWrite>
 20a:	ef df       	rcall	.-34     	; 0x1ea <i2c_Stop>
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <lcd_write>:
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
 214:	66 23       	and	r22, r22
 216:	31 f0       	breq	.+12     	; 0x224 <lcd_write+0x14>
 218:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 222:	05 c0       	rjmp	.+10     	; 0x22e <lcd_write+0x1e>
 224:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 22e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 238:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 23c:	8f 70       	andi	r24, 0x0F	; 15
 23e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 242:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 246:	9c 2f       	mov	r25, r28
 248:	90 7f       	andi	r25, 0xF0	; 240
 24a:	89 2b       	or	r24, r25
 24c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 250:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 254:	84 60       	ori	r24, 0x04	; 4
 256:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 25a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 25e:	ce df       	rcall	.-100    	; 0x1fc <IOEwrite>
 260:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 26a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 26e:	c6 df       	rcall	.-116    	; 0x1fc <IOEwrite>
 270:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 27a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 27e:	30 e1       	ldi	r19, 0x10	; 16
 280:	c3 9f       	mul	r28, r19
 282:	c0 01       	movw	r24, r0
 284:	11 24       	eor	r1, r1
 286:	82 2b       	or	r24, r18
 288:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 28c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 290:	84 60       	ori	r24, 0x04	; 4
 292:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 296:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 29a:	b0 df       	rcall	.-160    	; 0x1fc <IOEwrite>
 29c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 2a0:	8b 7f       	andi	r24, 0xFB	; 251
 2a2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 2a6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 2aa:	a8 df       	rcall	.-176    	; 0x1fc <IOEwrite>
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <lcd_control_pins>:
 2b0:	66 23       	and	r22, r22
 2b2:	79 f0       	breq	.+30     	; 0x2d2 <lcd_control_pins+0x22>
 2b4:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__data_end>
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <lcd_control_pins+0x14>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <lcd_control_pins+0x10>
 2c8:	cb 01       	movw	r24, r22
 2ca:	84 2b       	or	r24, r20
 2cc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 2d0:	0f c0       	rjmp	.+30     	; 0x2f0 <lcd_control_pins+0x40>
 2d2:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__data_end>
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <lcd_control_pins+0x32>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <lcd_control_pins+0x2e>
 2e6:	cb 01       	movw	r24, r22
 2e8:	80 95       	com	r24
 2ea:	84 23       	and	r24, r20
 2ec:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 2f0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 2f4:	83 cf       	rjmp	.-250    	; 0x1fc <IOEwrite>
 2f6:	08 95       	ret

000002f8 <toggle_e>:
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	d9 df       	rcall	.-78     	; 0x2b0 <lcd_control_pins>
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <toggle_e+0x8>
 304:	00 00       	nop
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	d2 cf       	rjmp	.-92     	; 0x2b0 <lcd_control_pins>
 30c:	08 95       	ret

0000030e <lcd_command>:
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	7f cf       	rjmp	.-258    	; 0x210 <lcd_write>
 312:	08 95       	ret

00000314 <lcd_gotoxy>:
 314:	61 11       	cpse	r22, r1
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_gotoxy+0xa>
 318:	80 58       	subi	r24, 0x80	; 128
 31a:	f9 cf       	rjmp	.-14     	; 0x30e <lcd_command>
 31c:	08 95       	ret
 31e:	80 54       	subi	r24, 0x40	; 64
 320:	f6 cf       	rjmp	.-20     	; 0x30e <lcd_command>
 322:	08 95       	ret

00000324 <lcd_clrscr>:
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	f3 df       	rcall	.-26     	; 0x30e <lcd_command>
 328:	8f e9       	ldi	r24, 0x9F	; 159
 32a:	9f e0       	ldi	r25, 0x0F	; 15
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_clrscr+0x8>
 330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_clrscr+0xe>
 332:	00 00       	nop
 334:	08 95       	ret

00000336 <lcd_putc>:
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{    
    lcd_write(c, 1);    
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	6b cf       	rjmp	.-298    	; 0x210 <lcd_write>
 33a:	08 95       	ret

0000033c <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 340:	ec 01       	movw	r28, r24
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	88 23       	and	r24, r24
 34a:	21 f0       	breq	.+8      	; 0x354 <lcd_puts+0x18>
        lcd_putc(c);
 34c:	f4 df       	rcall	.-24     	; 0x336 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 34e:	89 91       	ld	r24, Y+
 350:	81 11       	cpse	r24, r1
 352:	fc cf       	rjmp	.-8      	; 0x34c <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 35e:	ec 01       	movw	r28, r24
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	fc 01       	movw	r30, r24
 364:	84 91       	lpm	r24, Z
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <lcd_puts_p+0x1c>
        lcd_putc(c);
 36a:	e5 df       	rcall	.-54     	; 0x336 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 36c:	fe 01       	movw	r30, r28
 36e:	84 91       	lpm	r24, Z
 370:	21 96       	adiw	r28, 0x01	; 1
 372:	81 11       	cpse	r24, r1
 374:	fa cf       	rjmp	.-12     	; 0x36a <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{	
 37c:	cf 93       	push	r28
 37e:	c8 2f       	mov	r28, r24
	pcf_data = 0;
 380:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	i2c_Init();	
 384:	f2 de       	rcall	.-540    	; 0x16a <i2c_Init>
	
	lcd_control_pins(3,HIGH);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	92 df       	rcall	.-220    	; 0x2b0 <lcd_control_pins>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	99 ef       	ldi	r25, 0xF9	; 249
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <lcd_init+0x14>
 394:	00 c0       	rjmp	.+0      	; 0x396 <lcd_init+0x1a>
 396:	00 00       	nop
	
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
	pcf_data |= (_BV(LCD_DATA1_PIN) | _BV(LCD_DATA0_PIN));
 398:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__data_end>
 39c:	90 63       	ori	r25, 0x30	; 48
 39e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <__data_end>
	IOEwrite(pcf_data);
 3a2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 3a6:	2a df       	rcall	.-428    	; 0x1fc <IOEwrite>
		
    lcd_e_toggle();
 3a8:	a7 df       	rcall	.-178    	; 0x2f8 <toggle_e>
 3aa:	8f e1       	ldi	r24, 0x1F	; 31
 3ac:	9e e4       	ldi	r25, 0x4E	; 78
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x32>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_init+0x38>
 3b4:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3b6:	a0 df       	rcall	.-192    	; 0x2f8 <toggle_e>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_init+0x40>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_init+0x46>
 3c2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3c4:	99 df       	rcall	.-206    	; 0x2f8 <toggle_e>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcd_init+0x4e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <lcd_init+0x54>
 3d0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */		
	pcf_data &= ~_BV(LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
 3d2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__data_end>
 3d6:	9f 7e       	andi	r25, 0xEF	; 239
 3d8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <__data_end>
	IOEwrite(pcf_data);
 3dc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 3e0:	0d df       	rcall	.-486    	; 0x1fc <IOEwrite>
    lcd_e_toggle();
 3e2:	8a df       	rcall	.-236    	; 0x2f8 <toggle_e>
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_init+0x6c>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <lcd_init+0x72>
 3ee:	00 00       	nop
    delay(LCD_DELAY_INIT_4BIT);          /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3f0:	88 e2       	ldi	r24, 0x28	; 40
 3f2:	8d df       	rcall	.-230    	; 0x30e <lcd_command>

    lcd_command(LCD_DISP_ON);              /* display off                  */
 3f4:	8c e0       	ldi	r24, 0x0C	; 12
 3f6:	8b df       	rcall	.-234    	; 0x30e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3f8:	95 df       	rcall	.-214    	; 0x324 <lcd_clrscr>
	
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	88 df       	rcall	.-240    	; 0x30e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3fe:	8c 2f       	mov	r24, r28
 400:	86 df       	rcall	.-244    	; 0x30e <lcd_command>

}/* lcd_init */
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <Timer1_stop>:
	while(*pt_str!=0)
	{
		uart0_putc(*pt_str);
		pt_str++;
	}
}
 406:	e1 e8       	ldi	r30, 0x81	; 129
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	8c 7f       	andi	r24, 0xFC	; 252
 40e:	80 83       	st	Z, r24
 410:	08 95       	ret

00000412 <__vector_20>:
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	0b b6       	in	r0, 0x3b	; 59
 41e:	0f 92       	push	r0
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	6f 93       	push	r22
 42a:	7f 93       	push	r23
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
 438:	e6 df       	rcall	.-52     	; 0x406 <Timer1_stop>
 43a:	84 e9       	ldi	r24, 0x94	; 148
 43c:	91 e1       	ldi	r25, 0x11	; 17
 43e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 442:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0b be       	out	0x3b, r0	; 59
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <__vector_6>:
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	0b b6       	in	r0, 0x3b	; 59
 478:	0f 92       	push	r0
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	b9 df       	rcall	.-142    	; 0x406 <Timer1_stop>
 494:	e4 e8       	ldi	r30, 0x84	; 132
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	20 81       	ld	r18, Z
 49a:	31 81       	ldd	r19, Z+1	; 0x01
 49c:	11 82       	std	Z+1, r1	; 0x01
 49e:	10 82       	st	Z, r1
 4a0:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pulseIndex>
 4a4:	88 23       	and	r24, r24
 4a6:	19 f0       	breq	.+6      	; 0x4ae <__vector_6+0x42>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	b9 f0       	breq	.+46     	; 0x4da <__vector_6+0x6e>
 4ac:	34 c0       	rjmp	.+104    	; 0x516 <__vector_6+0xaa>
 4ae:	22 3b       	cpi	r18, 0xB2	; 178
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	38 07       	cpc	r19, r24
 4b4:	08 f4       	brcc	.+2      	; 0x4b8 <__vector_6+0x4c>
 4b6:	49 c0       	rjmp	.+146    	; 0x54a <__vector_6+0xde>
 4b8:	65 9b       	sbis	0x0c, 5	; 12
 4ba:	47 c0       	rjmp	.+142    	; 0x54a <__vector_6+0xde>
 4bc:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <pulseIndex>
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	e0 57       	subi	r30, 0x70	; 112
 4c8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ca:	31 83       	std	Z+1, r19	; 0x01
 4cc:	20 83       	st	Z, r18
 4ce:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pulseIndex>
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <pulseIndex>
 4d8:	38 c0       	rjmp	.+112    	; 0x54a <__vector_6+0xde>
 4da:	23 36       	cpi	r18, 0x63	; 99
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	38 07       	cpc	r19, r24
 4e0:	78 f0       	brcs	.+30     	; 0x500 <__vector_6+0x94>
 4e2:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <pulseIndex>
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	e0 57       	subi	r30, 0x70	; 112
 4ee:	fd 4f       	sbci	r31, 0xFD	; 253
 4f0:	31 83       	std	Z+1, r19	; 0x01
 4f2:	20 83       	st	Z, r18
 4f4:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pulseIndex>
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <pulseIndex>
 4fe:	25 c0       	rjmp	.+74     	; 0x54a <__vector_6+0xde>
 500:	27 32       	cpi	r18, 0x27	; 39
 502:	32 40       	sbci	r19, 0x02	; 2
 504:	10 f1       	brcs	.+68     	; 0x54a <__vector_6+0xde>
 506:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <pulseIndex>
 50a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 50e:	82 60       	ori	r24, 0x02	; 2
 510:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <genflg>
 514:	1a c0       	rjmp	.+52     	; 0x54a <__vector_6+0xde>
 516:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pulseIndex>
 51a:	83 34       	cpi	r24, 0x43	; 67
 51c:	40 f0       	brcs	.+16     	; 0x52e <__vector_6+0xc2>
 51e:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <pulseIndex>
 522:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 526:	81 60       	ori	r24, 0x01	; 1
 528:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <genflg>
 52c:	0e c0       	rjmp	.+28     	; 0x54a <__vector_6+0xde>
 52e:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <pulseIndex>
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e0 57       	subi	r30, 0x70	; 112
 53a:	fd 4f       	sbci	r31, 0xFD	; 253
 53c:	31 83       	std	Z+1, r19	; 0x01
 53e:	20 83       	st	Z, r18
 540:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pulseIndex>
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <pulseIndex>
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__vector_25>:
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	0b b6       	in	r0, 0x3b	; 59
 582:	0f 92       	push	r0
 584:	8f 93       	push	r24
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
 58a:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <FifoWr>
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	8e 0f       	add	r24, r30
 592:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <FifoWr>
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 59c:	e6 5e       	subi	r30, 0xE6	; 230
 59e:	fc 4f       	sbci	r31, 0xFC	; 252
 5a0:	80 83       	st	Z, r24
 5a2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <FifoWr>
 5a6:	80 32       	cpi	r24, 0x20	; 32
 5a8:	10 f0       	brcs	.+4      	; 0x5ae <__vector_25+0x38>
 5aa:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <FifoWr>
 5ae:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 5b2:	84 60       	ori	r24, 0x04	; 4
 5b4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <genflg>
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	8f 91       	pop	r24
 5be:	0f 90       	pop	r0
 5c0:	0b be       	out	0x3b, r0	; 59
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_26>:
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	0b b6       	in	r0, 0x3b	; 59
 5d8:	0f 92       	push	r0
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
 5e2:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <UART_TxHead>
 5e6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <UART_TxTail>
 5ea:	98 17       	cp	r25, r24
 5ec:	69 f0       	breq	.+26     	; 0x608 <__vector_26+0x3c>
 5ee:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <UART_TxTail>
 5f2:	ef 5f       	subi	r30, 0xFF	; 255
 5f4:	ef 77       	andi	r30, 0x7F	; 127
 5f6:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <UART_TxTail>
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	e5 5f       	subi	r30, 0xF5	; 245
 5fe:	fd 4f       	sbci	r31, 0xFD	; 253
 600:	80 81       	ld	r24, Z
 602:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 606:	05 c0       	rjmp	.+10     	; 0x612 <__vector_26+0x46>
 608:	e1 ec       	ldi	r30, 0xC1	; 193
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	8f 7d       	andi	r24, 0xDF	; 223
 610:	80 83       	st	Z, r24
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	0f 90       	pop	r0
 61c:	0b be       	out	0x3b, r0	; 59
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <Timer1_Init>:
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 634:	08 95       	ret

00000636 <ExtPin_Init>:
 636:	84 e0       	ldi	r24, 0x04	; 4
 638:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
 63c:	80 e2       	ldi	r24, 0x20	; 32
 63e:	8d bb       	out	0x1d, r24	; 29
 640:	08 95       	ret

00000642 <Usart0_Init>:
 642:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 646:	87 e6       	ldi	r24, 0x67	; 103
 648:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 64c:	88 e9       	ldi	r24, 0x98	; 152
 64e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 658:	08 95       	ret

0000065a <uart0_putc>:
 65a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <UART_TxHead>
 65e:	2f 5f       	subi	r18, 0xFF	; 255
 660:	2f 77       	andi	r18, 0x7F	; 127
 662:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <UART_TxTail>
 666:	29 17       	cp	r18, r25
 668:	e1 f3       	breq	.-8      	; 0x662 <uart0_putc+0x8>
 66a:	e2 2f       	mov	r30, r18
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	e5 5f       	subi	r30, 0xF5	; 245
 670:	fd 4f       	sbci	r31, 0xFD	; 253
 672:	80 83       	st	Z, r24
 674:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <UART_TxHead>
 678:	e1 ec       	ldi	r30, 0xC1	; 193
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	80 62       	ori	r24, 0x20	; 32
 680:	80 83       	st	Z, r24
 682:	08 95       	ret

00000684 <print_console>:
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	ec 01       	movw	r28, r24
 68a:	21 96       	adiw	r28, 0x01	; 1
 68c:	fc 01       	movw	r30, r24
 68e:	84 91       	lpm	r24, Z
 690:	88 23       	and	r24, r24
 692:	31 f0       	breq	.+12     	; 0x6a0 <print_console+0x1c>
 694:	e2 df       	rcall	.-60     	; 0x65a <uart0_putc>
 696:	fe 01       	movw	r30, r28
 698:	84 91       	lpm	r24, Z
 69a:	21 96       	adiw	r28, 0x01	; 1
 69c:	81 11       	cpse	r24, r1
 69e:	fa cf       	rjmp	.-12     	; 0x694 <print_console+0x10>
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <Variable_Init>:

void Variable_Init()
{
	UsartRxPtr = 0;
 6a6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <UsartRxPtr>
	UART_TxHead = 0;
 6aa:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <UART_TxHead>
	UART_TxTail = 0;
 6ae:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <UART_TxTail>
	SM = DISARMED;
 6b2:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <SM>
 6b6:	08 95       	ret

000006b8 <detect_symbol>:
}

uint8_t detect_symbol(uint8_t *a)
{
	uint8_t i = 0;	
	uint8_t HighByte = *a;
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 81       	ld	r18, Z
	a++;
	uint8_t LowByte = *a;
 6bc:	31 81       	ldd	r19, Z+1	; 0x01
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	fc 01       	movw	r30, r24
 6c4:	e9 50       	subi	r30, 0x09	; 9
 6c6:	ff 4f       	sbci	r31, 0xFF	; 255
	
	while(i<17)
	{
		if (HighByte == pgm_read_byte(&Symbol[i*3]))
 6c8:	e4 91       	lpm	r30, Z
 6ca:	2e 13       	cpse	r18, r30
 6cc:	0e c0       	rjmp	.+28     	; 0x6ea <detect_symbol+0x32>
 6ce:	fc 01       	movw	r30, r24
 6d0:	e8 50       	subi	r30, 0x08	; 8
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			if (LowByte == pgm_read_byte(&Symbol[i*3+1]))
 6d4:	e4 91       	lpm	r30, Z
 6d6:	3e 13       	cpse	r19, r30
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <detect_symbol+0x32>
			{				
				sValue = pgm_read_byte(&Symbol[i*3+2]);
 6da:	fc 01       	movw	r30, r24
 6dc:	e7 50       	subi	r30, 0x07	; 7
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	44 91       	lpm	r20, Z
 6e2:	40 93 8e 02 	sts	0x028E, r20	; 0x80028e <sValue>
				return 1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	03 96       	adiw	r24, 0x03	; 3
	uint8_t i = 0;	
	uint8_t HighByte = *a;
	a++;
	uint8_t LowByte = *a;
	
	while(i<17)
 6ec:	83 33       	cpi	r24, 0x33	; 51
 6ee:	91 05       	cpc	r25, r1
 6f0:	41 f7       	brne	.-48     	; 0x6c2 <detect_symbol+0xa>
				return 1;
			}
		}
		i++;
	}	
	return 0;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
}
 6f4:	08 95       	ret

000006f6 <read_Ir>:

uint8_t read_Ir()
{
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <read_Ir+0x6>
 6fc:	1f 92       	push	r1
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
	uint8_t i = 0, j=3;	
	uint8_t arr[4] = {0,0,0,0};
 702:	19 82       	std	Y+1, r1	; 0x01
 704:	1a 82       	std	Y+2, r1	; 0x02
 706:	1b 82       	std	Y+3, r1	; 0x03
 708:	1c 82       	std	Y+4, r1	; 0x04
 70a:	43 e0       	ldi	r20, 0x03	; 3
 70c:	50 e0       	ldi	r21, 0x00	; 0
	return 0;
}

uint8_t read_Ir()
{
	uint8_t i = 0, j=3;	
 70e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t arr[4] = {0,0,0,0};
	unsigned char temp;
	while(i<32)
	{
		temp = i >> 3;
 710:	83 2f       	mov	r24, r19
 712:	86 95       	lsr	r24
 714:	86 95       	lsr	r24
 716:	86 95       	lsr	r24
		arr[temp] = arr[temp] << 1;
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	e1 e0       	ldi	r30, 0x01	; 1
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ec 0f       	add	r30, r28
 720:	fd 1f       	adc	r31, r29
 722:	e8 0f       	add	r30, r24
 724:	f9 1f       	adc	r31, r25
 726:	20 81       	ld	r18, Z
 728:	22 0f       	add	r18, r18
 72a:	20 83       	st	Z, r18
		if (irBuff[j]>200)
 72c:	fa 01       	movw	r30, r20
 72e:	ee 0f       	add	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	e0 57       	subi	r30, 0x70	; 112
 734:	fd 4f       	sbci	r31, 0xFD	; 253
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	69 3c       	cpi	r22, 0xC9	; 201
 73c:	71 05       	cpc	r23, r1
 73e:	40 f0       	brcs	.+16     	; 0x750 <read_Ir+0x5a>
		{
			arr[temp] |= 0x01;
 740:	e1 e0       	ldi	r30, 0x01	; 1
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	ec 0f       	add	r30, r28
 746:	fd 1f       	adc	r31, r29
 748:	e8 0f       	add	r30, r24
 74a:	f9 1f       	adc	r31, r25
 74c:	21 60       	ori	r18, 0x01	; 1
 74e:	20 83       	st	Z, r18
		}
		i++;
 750:	3f 5f       	subi	r19, 0xFF	; 255
 752:	4e 5f       	subi	r20, 0xFE	; 254
 754:	5f 4f       	sbci	r21, 0xFF	; 255
uint8_t read_Ir()
{
	uint8_t i = 0, j=3;	
	uint8_t arr[4] = {0,0,0,0};
	unsigned char temp;
	while(i<32)
 756:	30 32       	cpi	r19, 0x20	; 32
 758:	d9 f6       	brne	.-74     	; 0x710 <read_Ir+0x1a>
			arr[temp] |= 0x01;
		}
		i++;
		j=j+2;
	}
	IrBytes[0] = arr[0];
 75a:	e6 e1       	ldi	r30, 0x16	; 22
 75c:	f3 e0       	ldi	r31, 0x03	; 3
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	80 83       	st	Z, r24
	IrBytes[1] = arr[1];
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	81 83       	std	Z+1, r24	; 0x01
	IrBytes[2] = arr[2];
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	82 83       	std	Z+2, r24	; 0x02
	IrBytes[3] = arr[3];
 76a:	8c 81       	ldd	r24, Y+4	; 0x04
 76c:	83 83       	std	Z+3, r24	; 0x03
	return detect_symbol(&arr[2]);	
 76e:	ce 01       	movw	r24, r28
 770:	03 96       	adiw	r24, 0x03	; 3
 772:	a2 df       	rcall	.-188    	; 0x6b8 <detect_symbol>
}
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <check_pass>:


uint8_t check_pass()
{
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	00 d0       	rcall	.+0      	; 0x788 <check_pass+0x6>
 788:	1f 92       	push	r1
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
	uint8_t pass[4]={'1', '2', '3', '4'};
 78e:	81 e3       	ldi	r24, 0x31	; 49
 790:	89 83       	std	Y+1, r24	; 0x01
 792:	82 e3       	ldi	r24, 0x32	; 50
 794:	8a 83       	std	Y+2, r24	; 0x02
 796:	83 e3       	ldi	r24, 0x33	; 51
 798:	8b 83       	std	Y+3, r24	; 0x03
 79a:	84 e3       	ldi	r24, 0x34	; 52
 79c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t i=0;
	
	for (i=0;i<4;i++)
	{
		if (UserInput[i]!=pass[i])
 79e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <UserInput>
 7a2:	81 33       	cpi	r24, 0x31	; 49
 7a4:	81 f4       	brne	.+32     	; 0x7c6 <check_pass+0x44>
 7a6:	ab e3       	ldi	r26, 0x3B	; 59
 7a8:	b3 e0       	ldi	r27, 0x03	; 3
 7aa:	fe 01       	movw	r30, r28
 7ac:	32 96       	adiw	r30, 0x02	; 2
 7ae:	9e 01       	movw	r18, r28
 7b0:	2b 5f       	subi	r18, 0xFB	; 251
 7b2:	3f 4f       	sbci	r19, 0xFF	; 255
 7b4:	9d 91       	ld	r25, X+
 7b6:	81 91       	ld	r24, Z+
 7b8:	98 13       	cpse	r25, r24
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <check_pass+0x48>
uint8_t check_pass()
{
	uint8_t pass[4]={'1', '2', '3', '4'};
	uint8_t i=0;
	
	for (i=0;i<4;i++)
 7bc:	e2 17       	cp	r30, r18
 7be:	f3 07       	cpc	r31, r19
 7c0:	c9 f7       	brne	.-14     	; 0x7b4 <check_pass+0x32>
		if (UserInput[i]!=pass[i])
		{
			return 0;
		}
	}				
	return 1;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <check_pass+0x4a>
	
	for (i=0;i<4;i++)
	{
		if (UserInput[i]!=pass[i])
		{
			return 0;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <check_pass+0x4a>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
		}
	}				
	return 1;
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <main>:
uint8_t check_pass();

int main(void)
{
    /* Replace with your application code */
	cli();	
 7da:	f8 94       	cli
	Variable_Init();
 7dc:	64 df       	rcall	.-312    	; 0x6a6 <Variable_Init>
	Usart0_Init();	
 7de:	31 df       	rcall	.-414    	; 0x642 <Usart0_Init>
	Timer1_Init();
 7e0:	23 df       	rcall	.-442    	; 0x628 <Timer1_Init>
	ExtPin_Init();
 7e2:	29 df       	rcall	.-430    	; 0x636 <ExtPin_Init>
	
	lcd_init(LCD_DISP_ON);
 7e4:	8c e0       	ldi	r24, 0x0C	; 12
 7e6:	ca dd       	rcall	.-1132   	; 0x37c <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e8:	2f ef       	ldi	r18, 0xFF	; 255
 7ea:	81 ee       	ldi	r24, 0xE1	; 225
 7ec:	94 e0       	ldi	r25, 0x04	; 4
 7ee:	21 50       	subi	r18, 0x01	; 1
 7f0:	80 40       	sbci	r24, 0x00	; 0
 7f2:	90 40       	sbci	r25, 0x00	; 0
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x14>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0x1e>
 7f8:	00 00       	nop
	_delay_ms(100);	
	
	
	sei();		
 7fa:	78 94       	sei
    while (1) 
    {	
		if (genflg & (1<<bIrRecvd))
 7fc:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 800:	80 ff       	sbrs	r24, 0
 802:	4b c0       	rjmp	.+150    	; 0x89a <main+0xc0>
		{
			genflg &= ~(1<<bIrRecvd);			
 804:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 808:	8e 7f       	andi	r24, 0xFE	; 254
 80a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <genflg>
			if (read_Ir())
 80e:	73 df       	rcall	.-282    	; 0x6f6 <read_Ir>
 810:	88 23       	and	r24, r24
 812:	a1 f3       	breq	.-24     	; 0x7fc <main+0x22>
			{
				lcd_gotoxy(15,0);
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	8f e0       	ldi	r24, 0x0F	; 15
 818:	7d dd       	rcall	.-1286   	; 0x314 <lcd_gotoxy>
				lcd_putc(sValue);
 81a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <sValue>
 81e:	8b dd       	rcall	.-1258   	; 0x336 <lcd_putc>
				
				if (sValue=='o')
 820:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <sValue>
 824:	8f 36       	cpi	r24, 0x6F	; 111
 826:	19 f5       	brne	.+70     	; 0x86e <main+0x94>
				{					
					
					if (check_pass()==1 && sCount==4)
 828:	ac df       	rcall	.-168    	; 0x782 <check_pass>
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	b9 f4       	brne	.+46     	; 0x85c <main+0x82>
 82e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <sCount>
 832:	84 30       	cpi	r24, 0x04	; 4
 834:	99 f4       	brne	.+38     	; 0x85c <main+0x82>
					{
						lcd_gotoxy(0,1);
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	6c dd       	rcall	.-1320   	; 0x314 <lcd_gotoxy>
						if (SM==DISARMED)
 83c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <SM>
 840:	81 11       	cpse	r24, r1
 842:	07 c0       	rjmp	.+14     	; 0x852 <main+0x78>
						{							
							lcd_puts("ARMED");
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	92 e0       	ldi	r25, 0x02	; 2
 848:	79 dd       	rcall	.-1294   	; 0x33c <lcd_puts>
							SM = ARMED;							
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <SM>
 850:	05 c0       	rjmp	.+10     	; 0x85c <main+0x82>
						}
						else
						{
							lcd_puts_p(PSTR("     "));
 852:	81 ef       	ldi	r24, 0xF1	; 241
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	81 dd       	rcall	.-1278   	; 0x35a <lcd_puts_p>
							SM = DISARMED;
 858:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <SM>
						}
					}					
					sCount = 0;
 85c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <sCount>
					lcd_gotoxy(0,0);
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	57 dd       	rcall	.-1362   	; 0x314 <lcd_gotoxy>
					lcd_puts_p(PSTR("     "));
 866:	8b ee       	ldi	r24, 0xEB	; 235
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	77 dd       	rcall	.-1298   	; 0x35a <lcd_puts_p>
 86c:	c7 cf       	rjmp	.-114    	; 0x7fc <main+0x22>
				}
				else
				{
					if(sCount < 4)
 86e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <sCount>
 872:	84 30       	cpi	r24, 0x04	; 4
 874:	08 f0       	brcs	.+2      	; 0x878 <main+0x9e>
 876:	c2 cf       	rjmp	.-124    	; 0x7fc <main+0x22>
					{
						lcd_gotoxy(sCount,0);
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	4c dd       	rcall	.-1384   	; 0x314 <lcd_gotoxy>
						lcd_putc('*');	
 87c:	8a e2       	ldi	r24, 0x2A	; 42
 87e:	5b dd       	rcall	.-1354   	; 0x336 <lcd_putc>
						UserInput[sCount] = sValue;
 880:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <sCount>
 884:	e8 2f       	mov	r30, r24
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	e6 5c       	subi	r30, 0xC6	; 198
 88a:	fc 4f       	sbci	r31, 0xFC	; 252
 88c:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <sValue>
 890:	90 83       	st	Z, r25
						sCount++;					
 892:	8f 5f       	subi	r24, 0xFF	; 255
 894:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <sCount>
 898:	b1 cf       	rjmp	.-158    	; 0x7fc <main+0x22>

					
				}				
			}
		}
		else if (genflg & (1<<bIrRep))
 89a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 89e:	81 ff       	sbrs	r24, 1
 8a0:	ad cf       	rjmp	.-166    	; 0x7fc <main+0x22>
		{
			genflg &= ~(1<<bIrRep);
 8a2:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <genflg>
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <genflg>
			print_console(PSTR("Rep.\r\n"));
 8ac:	84 ee       	ldi	r24, 0xE4	; 228
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	e9 de       	rcall	.-558    	; 0x684 <print_console>
 8b2:	a4 cf       	rjmp	.-184    	; 0x7fc <main+0x22>

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
